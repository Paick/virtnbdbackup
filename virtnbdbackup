#!/usr/bin/python3
"""
    Copyright (C) 2021  Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import os
import sys
import json
import signal
import pprint
import logging
import argparse
from datetime import datetime
from functools import partial
from tqdm import tqdm

import libvirtnbdbackup.common as common
import libvirtnbdbackup.nbdhelper as nbdhelper
import libvirtnbdbackup.extenthandler as extenthandler
import libvirtnbdbackup.sparsestream  as sparsestream
import libvirtnbdbackup.qemuhelper as qemuhelper
import libvirtnbdbackup.libvirthelper as libvirthelper

from libvirtnbdbackup import __version__

def handleSignal(disks, domObj, virtClient, log, signum, frame):
    log.error('Catched signal: %s' % signum)
    log.error('Cleanup: Stopping backup job')
    virtClient.stopBackup(domObj, disks[0].diskTarget)
    sys.exit(1)

def main():
    parser = argparse.ArgumentParser(
        description='Backup libvirt/qemu virtual machines'
    )
    parser.add_argument(
        "-d", "--domain", required=True, type=str,
        help="Domain to backup")
    parser.add_argument(
        "-l", "--level", default="copy",
        choices=['copy','full','inc'], type=str,
        help="Backup level, defaults to copy")
    parser.add_argument(
        "-t", "--type", default="stream", type=str,
        choices=['stream','raw'],
        help="Output type: stream or raw")
    parser.add_argument(
        "-o", "--output", required=True, type=str,
        help="Output target directory")
    parser.add_argument(
        "-S", "--scratchdir", default="/var/tmp", required=False, type=str,
        help="Target directory for temporary scratch file")
    parser.add_argument(
        "-q", "--qemu", default=False, action="store_true",
        help="Use Qemu tools to query extents")
    parser.add_argument(
        "-i", "--include", default=None, type=str,
        help="Backup only disk with target dev name (-i vda)")
    parser.add_argument(
        "-x", "--exclude", default=None, type=str,
        help="Exclude disk(s) with target dev name (-x vda,vdb)")
    parser.add_argument(
        "-c", "--checkpoint", default=False,
        help="During incremental backup, use specified checkpoint as parent",
        type=str)
    parser.add_argument(
        "-s", "--startonly", default=False,
        help="Only initialize backup job via libvirt, do not backup any data",
        action="store_true")
    parser.add_argument(
        "-k", "--killonly", default=False,
        help="Kill any running block job",
        action="store_true")
    parser.add_argument(
        "-p", "--printonly", default=False,
        help="Quit after printing extent information",
        action="store_true")
    parser.add_argument(
        "-f", "--socketfile", default=None,
        type=str,
        help="Use specified file for NBD Server socket instead of random file")
    parser.add_argument(
        "-v", "--verbose", default=False,
        help="Enable debug output",
        action="store_true")
    parser.add_argument(
        "-n", "--noprogress", default=False,
        help="Disable progress bar",
        action="store_true")

    lib = common.Common()
    args = lib.argparse(parser)

    if args.output == "-":
        logPath = "./backup.log"
    else:
        logPath = "%s/backup.%s.%s.log" % (
            args.output,
            args.level,
            datetime.now().strftime("%m%d%Y%H%M%S")
        )

    lib.createOutputDir(args.output)

    logging.basicConfig(
        level=lib.setLogLevel(args.verbose),
        handlers=[
            logging.FileHandler(logPath),
            logging.StreamHandler()
        ],
        format=lib.logFormat,
        datefmt=lib.logDateFormat
    )

    lib.printVersion(__version__)

    if args.type == "raw" and args.level == "inc":
        logging.error("Backup format raw does not support incremental backup")
        sys.exit(1)

    if args.printonly is True:
        logging.info('Printing only extend information: enforce level copy')
        args.level = "copy"

    if args.level == 'inc' and args.output != "-" and lib.partialBackup(args) is True:
        logging.error('Partial backup found in target directory: %s', args.output)
        logging.error('One of the last backups seems to have failed.')
        logging.error('Consider re-executing full backup.')
        sys.exit(1)

    if not args.output == "-" and not args.startonly and not args.killonly:
        if not lib.targetIsEmpty(args):
            logging.error("Target directory must empty for full or copy backup.")
            sys.exit(1)

    virtClient = libvirthelper.client()
    try:
        domObj = virtClient.getDomain(args.domain)
    except Exception as e:
        logging.error('Unable to get domain information: %s', e)
        sys.exit(1)

    if virtClient.hasIncrementalEnabled(domObj) is False:
        logging.error("Domain is missing required incremental-backup capability.")
        sys.exit(1)

    vmConfig = virtClient.getDomainConfig(domObj)
    disks = virtClient.getDomainDisks(vmConfig, args.exclude)

    signal.signal(
        signal.SIGINT,
        partial(handleSignal, disks, domObj, virtClient, logging)
    )

    if not disks:
        logging.error(
            "Domain has no disks attached which support changed block tracking."
        )
        sys.exit(1)

    logging.info(
        "Domain has %s disks attached which support changed block tracking.",
        len(disks)
    )

    if args.killonly is True:
        logging.info("Stopping backup job")
        try:
            virtClient.stopBackup(domObj, disks[0].diskTarget)
            sys.exit(0)
        except Exception as e:
            logging.warn('%s', e)
            sys.exit(1)

    checkpointName = lib.checkpointName
    parentCheckpoint = False
    checkpoints = []
    cptFile = '%s/%s.cpt' % (args.output, args.domain)
    if os.path.exists(cptFile):
        with open(cptFile,'r') as cptFh:
            checkpoints = json.loads(cptFh.read())

    if args.level != "copy":
        logging.info('Looking for checkpoints')
        if args.level == "full" and checkpoints:
            logging.info("Removing all existant checkpoints before full backup")
            virtClient.removeAllCheckpoints(domObj, checkpoints)
            os.remove(cptFile)
            checkpoints = []
        elif args.level == "full" and len(checkpoints) < 1:
            virtClient.removeAllCheckpoints(domObj,None)
            checkpoints = []

        if checkpoints and args.level == "inc":
            nextCpt = len(checkpoints)+1
            checkpointName = "%s.%s" % (checkpointName, nextCpt)
            if args.checkpoint != False:
                logging.info("Overriding parent checkpoint: %s", args.checkpoint)
                parentCheckpoint = args.checkpoint
            else:
                parentCheckpoint = checkpoints[-1]
            logging.info('Found checkpoints, next checkpoint id: %s', nextCpt)
            logging.info("Parent checkpoint name %s", parentCheckpoint)

        if args.level == "inc" and len(checkpoints)<1:
            logging.error("No prior checkpoints found, execute full backup first")
            sys.exit(1)

        logging.info("Using checkpoint name: %s", checkpointName)

    logging.info('Temporary scratch file target directory: %s', args.scratchdir)

    lib.createOutputDir(args.scratchdir)

    backupSocket = lib.getSocketFile(args.socketfile)

    try:
        logging.info('Starting backup job.')
        virtClient.startBackup(
            domObj, disks, args.level,
            checkpointName, parentCheckpoint,
            args.scratchdir, backupSocket
        )
        logging.debug('Backup job started, using socket: %s', backupSocket)
    except Exception as e:
        logging.error('%s', e)
        sys.exit(1)

    if args.level != "copy":
        logging.info('Started backup job with checkpoint, saving information.')
        if not checkpoints:
            checkpoints = []
        checkpoints.append(checkpointName)
        with open(cptFile,'w') as cFw:
            cFw.write(json.dumps(checkpoints))

    if args.startonly is True:
        logging.info("Started backup job for debugging, exiting.")
        sys.exit(0)

    for disk in disks:
        if args.include is not None and disk.diskTarget != args.include:
            logging.info("Skipping disk: %s", disk.diskTarget)
            continue
        try:
            backupDisk(disk.diskTarget, args, lib, checkpointName,
                       parentCheckpoint, backupSocket)
        except Exception as e:
            logging.error('Unable to backup Disk: %s', e)
            virtClient.stopBackup(domObj, disk.diskTarget)
            sys.exit(1)
    if args.printonly is False and args.output != "-":
        backupConfig(vmConfig, args, checkpointName)
    logging.info('Stopping backup task')
    ret = virtClient.stopBackup(domObj, disks[0].diskTarget)
    if ret == 0:
        logging.info('Finished')
    else:
        logging.warning('Unable to stop backup task, return: %s', e)

def backupConfig(vmConfig, args, checkpointName):
    configFile = '%s/vmconfig.%s.xml' % (args.output, checkpointName)
    logging.info("Saving VM config to: %s", configFile)
    try:
        with open(configFile, 'w') as configFh:
            configFh.write(vmConfig)
    except Exception as e:
        logging.error('Unable to save VM config: %s', e)
        sys.exit(1)

def backupDisk(diskTarget, args, lib, checkpointName,
               parentCheckpoint, backupSocket):
    metaContext = None
    if args.level == "inc":
        metaContext = "qemu:dirty-bitmap:backup-%s" % diskTarget
        logging.info("INC backup: set context to %s", metaContext)

    nbdClient = nbdhelper.nbdClient(
        diskTarget, metaContext, backupSocket
    )
    logging.info('NDB Endpoint socket: %s', backupSocket)
    connection = nbdClient.connect()

    if args.qemu and args.level != "inc":
        logging.info("Using qemu tools to query extents")
        extentHandler = extenthandler.ExtentHandler(
            qemuhelper.qemuHelper(diskTarget), metaContext, backupSocket
        )
    else:
        logging.info("Using nbd to query extents")
        extentHandler = extenthandler.ExtentHandler(
            connection, metaContext, backupSocket
        )
    extents = extentHandler.queryBlockStatus()
    diskSize = connection.get_size()

    if extents is None:
        logging.error("No extents found")
        return

    thinBackupSize = sum(
        [extent.length for extent in extents if extent.data is True]
    )
    logging.info("Got %s extents", len(extents))
    if args.verbose is True:
        pprint.pprint(lib.dumpExtentJson(extents))
    logging.info("%s bytes disk size", diskSize)
    logging.info("%s bytes of data extents to backup", thinBackupSize)
    if args.printonly is True:
        nbdClient.disconnect()
        return

    if args.level == "inc" and thinBackupSize == 0:
        logging.info("No dirty blocks found")

    if args.level in ('full','copy'):
        targetFile = '%s/%s.%s.data' % (
            args.output,
            diskTarget,
            args.level
        )
    elif args.level == "inc":
        targetFile = '%s/%s.inc.%s.data' % (
            args.output,
            diskTarget,
            checkpointName
        )

    if args.output == '-':
        targetFilePartial = args.output
        if args.type == 'stream':
            writer = sys.stdout.buffer
        else:
            logging.error('Writing to stdout not supported with raw format.')
            return
    else:
        targetFilePartial = '%s.partial' % targetFile
        logging.info("Write data to target file: %s", targetFilePartial)
        try:
            writer = open(targetFilePartial,'wb', buffering=0)
        except Exception as e:
            logging.error('Unable to open target file: %s', e)
            return
    if args.type == "raw":
        logging.info("Creating full provisioned raw backup image")
        writer.truncate(diskSize)
        writer.seek(0)
    else:
        logging.info("Creating thin provisioned stream backup image")
        inc = False
        if args.level == "inc":
            inc = True
        metadata = sparsestream.SparseStream().dumpMetadata(
            diskSize, thinBackupSize, diskTarget, checkpointName,
            parentCheckpoint, inc
        )
        sparsestream.SparseStream().writeFrame(
            writer, sparsestream.SparseStreamTypes().META,
            0, len(metadata)
        )
        writer.write(metadata)
        writer.write(sparsestream.SparseStreamTypes().TERM)

    progressBar = tqdm(
        total=thinBackupSize, desc="saving disk %s" % diskTarget,
        unit='B', unit_scale=True, disable=args.noprogress
    )
    for save in extents:
        if save.data is True:
            if args.type == "stream":
                sparsestream.SparseStream().writeFrame(
                    writer, sparsestream.SparseStreamTypes().DATA,
                    save.offset, save.length
                )
                logging.debug("Read data from: start %s, length: %s",
                              save.offset, save.length)
            if save.length >= nbdClient.maxRequestSize:
                lib.writeChunk(
                    writer, save.offset, save.length,
                    nbdClient.maxRequestSize, connection, args.type
                )
            else:
                if args.type == "raw":
                    writer.seek(save.offset)
                writer.write(connection.pread(
                    save.length,
                    save.offset
                ))
            if args.type == "stream":
                writer.write(sparsestream.SparseStreamTypes().TERM)

            progressBar.update(save.length)
        else:
            if args.type == "raw":
                writer.seek(save.offset)
            elif args.type == "stream" and args.level != "inc":
                sparsestream.SparseStream().writeFrame(
                    writer, sparsestream.SparseStreamTypes().ZERO,
                    save.offset, save.length
                )
    if args.type == "stream":
        sparsestream.SparseStream().writeFrame(
            writer, sparsestream.SparseStreamTypes().STOP,
            0, 0
        )

    writer.close()
    progressBar.close()
    if targetFilePartial != "-":
        try:
            os.rename(targetFilePartial, targetFile)
            logging.info(
                'Backup of disk %s finished, file: %s',
                diskTarget,
                targetFile
            )
        except OSError as e:
            logging.error('Unable to rename file: %s' %e)
            sys.exit(1)

if __name__ == "__main__":
    main()
